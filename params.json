{"name":"Puppet-keepalived","tagline":"","body":"# Puppet Keepalived\r\n\r\n## Build status\r\n\r\n[![Build Status](https://travis-ci.org/arioch/puppet-keepalived.png?branch=master)](https://travis-ci.org/arioch/puppet-keepalived)\r\n\r\n## Requirements\r\n\r\n* [concat module](https://github.com/ripienaar/puppet-concat)\r\n\r\n## Tested on...\r\n\r\n* Debian 7 (Wheezy)\r\n* Debian 6 (Squeeze)\r\n* RHEL 6\r\n\r\n## Example usage\r\n\r\n### Basic IP-based VRRP failover\r\n\r\nThis configuration will fail-over when:\r\n\r\na. Master node is unavailable\r\n\r\n```puppet\r\nnode /node01/ {\r\n  include keepalived\r\n\r\n  keepalived::vrrp::instance { 'VI_50':\r\n    interface         => 'eth1',\r\n    state             => 'MASTER',\r\n    virtual_router_id => '50',\r\n    priority          => '101',\r\n    auth_type         => 'PASS',\r\n    auth_pass         => 'secret',\r\n    virtual_ipaddress => [ '10.0.0.1/29' ],\r\n    track_interface   => ['eth1','tun0'], # optional, monitor these interfaces.\r\n  }\r\n}\r\n\r\nnode /node02/ {\r\n  include keepalived\r\n\r\n  keepalived::vrrp::instance { 'VI_50':\r\n    interface         => 'eth1',\r\n    state             => 'BACKUP',\r\n    virtual_router_id => '50',\r\n    priority          => '100',\r\n    auth_type         => 'PASS',\r\n    auth_pass         => 'secret',\r\n    virtual_ipaddress => [ '10.0.0.1/29' ],\r\n    track_interface   => ['eth1','tun0'], # optional, monitor these interfaces.\r\n  }\r\n}\r\n```\r\n\r\n### Add floating routes\r\n\r\n```puppet\r\nnode /node01/ {\r\n  include keepalived\r\n\r\n  keepalived::vrrp::instance { 'VI_50':\r\n    interface         => 'eth1',\r\n    state             => 'MASTER',\r\n    virtual_router_id => '50',\r\n    priority          => '101',\r\n    auth_type         => 'PASS',\r\n    auth_pass         => 'secret',\r\n    virtual_ipaddress => [ '10.0.0.1/29' ],\r\n    virtual_routes    => [ { to  => '168.168.2.0/24', via => '10.0.0.2' },\r\n                           { to  => '168.168.3.0/24', via => '10.0.0.3' } ]\r\n  }\r\n}\r\n```\r\n\r\n### Detect application level failure\r\n\r\nThis configuration will fail-over when:\r\n\r\na. NGinX daemon is not running<br>\r\nb. Master node is unavailable\r\n\r\n```puppet\r\nnode /node01/ {\r\n  include ::keepalived\r\n\r\n  keepalived::vrrp::script { 'check_nginx':\r\n    script => '/usr/bin/killall -0 nginx',\r\n  }\r\n\r\n  keepalived::vrrp::instance { 'VI_50':\r\n    interface         => 'eth1',\r\n    state             => 'MASTER',\r\n    virtual_router_id => '50',\r\n    priority          => '101',\r\n    auth_type         => 'PASS',\r\n    auth_pass         => 'secret',\r\n    virtual_ipaddress => '10.0.0.1/29',\r\n    track_script      => 'check_nginx',\r\n  }\r\n}\r\n\r\nnode /node02/ {\r\n  include ::keepalived\r\n\r\n  keepalived::vrrp::script { 'check_nginx':\r\n    script => '/usr/bin/killall -0 nginx',\r\n  }\r\n\r\n  keepalived::vrrp::instance { 'VI_50':\r\n    interface         => 'eth1',\r\n    state             => 'BACKUP',\r\n    virtual_router_id => '50',\r\n    priority          => '100',\r\n    auth_type         => 'PASS',\r\n    auth_pass         => 'secret',\r\n    virtual_ipaddress => '10.0.0.1/29',\r\n    track_script      => 'check_nginx',\r\n  }\r\n}\r\n```\r\n\r\n### Global definitions\r\n\r\n```puppet\r\nclass { 'keepalived::global_defs':\r\n  ensure                  => present,\r\n  notification_email      => 'no@spam.tld',\r\n  notification_email_from => 'no@spam.tld',\r\n  smtp_server             => 'localhost',\r\n  smtp_connect_timeout    => '60',\r\n  router_id               => 'your_router_instance_id',\r\n}\r\n```\r\n\r\n### Soft-restart the Keepalived daemon\r\n\r\n```puppet\r\nclass { '::keepalived':\r\n  service_restart => 'service keepalived reload',     # When using SysV Init\r\n  # service_restart => 'systemctl reload keepalived', # When using SystemD\r\n}\r\n```\r\n\r\n### Opt out of having the service managed by the module\r\n\r\n```puppet\r\nclass { '::keepalived':\r\n  service_manage => false,\r\n}\r\n```\r\n\r\n### Unicast instead of Multicast\r\n\r\n**caution: unicast support has only been added to Keepalived since version 1.2.8**\r\n\r\nBy default Keepalived will use multicast packets to determine failover conditions.\r\nHowever, in many cloud environments it is not possible to use multicast because of\r\nnetwork restrictions. Keepalived can be configured to use unicast in such environments:\r\n\r\n```puppet\r\n  keepalived::vrrp::instance { 'VI_50':\r\n    interface         => 'eth1',\r\n    state             => 'BACKUP',\r\n    virtual_router_id => '50',\r\n    priority          => '100',\r\n    auth_type         => 'PASS',\r\n    auth_pass         => 'secret',\r\n    virtual_ipaddress => '10.0.0.1/29',\r\n    track_script      => 'check_nginx',\r\n    unicast_source_ip => $::ipaddress_eth1,\r\n    unicast_peers     => ['10.0.0.1', '10.0.0.2']\r\n  }\r\n```\r\nThe 'unicast\\_source\\_ip' parameter is optional as Keepalived will bind to the specified interface by default.\r\nThe 'unicast\\_peers' parameter contains an array of ip addresses that correspond to the failover nodes.\r\n\r\n## Unit testing\r\n\r\nPlain RSpec:\r\n\r\n    $ rake spec\r\n\r\nUsing bundle:\r\n\r\n    $ bundle exec rake spec\r\n\r\nTest against a specific Puppet or Facter version:\r\n\r\n    $ PUPPET_VERSION=3.2.1  bundle update && bundle exec rake spec\r\n    $ PUPPET_VERSION=2.7.19 bundle update && bundle exec rake spec\r\n    $ FACTER_VERSION=1.6.8  bundle update && bundle exec rake spec\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}